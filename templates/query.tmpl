package graph

import (
	"context"

	"github.com/alextanhongpin/go-graphql-template/model"
	"github.com/google/uuid"
)

type {{ .Entity }}Query struct {
	ctx *Context
}

// New{{ .Entity }}Query returns a new query.
func New{{ .Entity }}Query(ctx *Context) *{{ .Entity }}Query {
	return &{{ .Entity }}Query{ctx}
}

type {{ .Entity }}Connection struct {
	TotalCount int32
	Edges      []{{ .Entity }}Edge
	PageInfo   model.PageInfo
}

type {{ .Entity }}Edge struct {
	Cursor string
	Node   *{{ .Entity }}Resolver
}

func (q *{{ .Entity }}Query) {{ .Entity }}(ctx context.Context, args {{ .Entity }}Args) (*{{ .Entity }}Resolver, error) {
	{{ camelcase .Entity }}ID, err := uuid.Parse(string(args.ID))
	if err != nil {
		return nil, err
	}

	{{ camelcase .Entity }}, err := q.ctx.Repository.Find{{ .Entity }}(ctx, {{ camelcase .Entity }}ID)
	if err != nil {
		return nil, err
	}
	return &{{ .Entity }}Resolver{
		{{ camelcase .Entity }}: {{ camelcase .Entity }},
		ctx:  q.ctx,
	}, nil
}
