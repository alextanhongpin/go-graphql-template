package {{ .Entity }}graph

import (
	"context"

	"github.com/alextanhongpin/graphql-server-starter/model"
	"github.com/alextanhongpin/graphql-server-starter/resolver"
	"github.com/google/uuid"
)

type Query struct {
	ctx *model.ResolverContext
}

type {{ pascalcase .Entity }}Connection struct {
	TotalCount int32
	Edges      []{{ pascalcase .Entity }}Edge
	PageInfo   model.PageInfo
}

type {{ pascalcase .Entity }}Edge struct {
	Cursor string
	Node   *resolver.{{ pascalcase .Entity }}Resolver
}

// NewQuery reutrns a new query.
func NewQuery(ctx *model.ResolverContext) *Query {
	return &Query{ctx}
}

func (q *Query) {{ pascalcase .Entity }}(ctx context.Context, args {{ pascalcase .Entity }}Args) (*resolver.{{ pascalcase .Entity }}Resolver, error) {
	{{ .Entity }}ID, err := uuid.Parse(string(args.ID))
	if err != nil {
		return nil, err
	}

	{{ .Entity }}, err := q.ctx.Repository.Find{{ pascalcase .Entity }}(ctx, {{ .Entity }}ID)
	if err != nil {
		return nil, err
	}
	return &resolver.{{ pascalcase .Entity }}Resolver{
		{{ pascalcase .Entity }}: {{ .Entity }},
		Ctx:  q.ctx,
	}, nil
}
