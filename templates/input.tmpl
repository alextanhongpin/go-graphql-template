package graph

import (
	"context"

	"github.com/alextanhongpin/go-graphql-template/entity"
	"github.com/alextanhongpin/go-graphql-template/model"

	"github.com/google/uuid"
)

type {{ .Entity }}Mutation struct {
	ctx *Context
}

func New{{ .Entity }}Mutation(ctx *Context) *{{ .Entity }}Mutation {
	return &{{ .Entity }}Mutation{ctx: ctx}
}

func (m *{{ .Entity }}Mutation) Create{{ .Entity }}(ctx context.Context, args Create{{ .Entity }}Args) (*{{ .Entity }}Resolver, error) {
	if err := m.ctx.Validator.Struct(args.Input); err != nil {
		return nil, err
	}

	var (
		name  = args.Input.Name
		email = args.Input.Email
	)
	{{ camelcase .Entity }}, err := m.ctx.Repository.Create{{ .Entity }}(ctx, entity.Create{{ .Entity }}Params{
		Name:              name,
		Email:             model.NewNullString(email),
		Preferred{{ .Entity }}name: name,
	})
	if err != nil {
		return nil, err
	}
	return &{{ .Entity }}Resolver{
		{{ camelcase .Entity }}: {{ camelcase .Entity }},
		ctx:  m.ctx,
	}, nil
}

func (m *{{ .Entity }}Mutation) Update{{ .Entity }}(ctx context.Context, args Update{{ .Entity }}Args) (*{{ .Entity }}Resolver, error) {
	if err := m.ctx.Validator.Struct(args.Input); err != nil {
		return nil, err
	}

	var (
		name = args.Input.Name
		id   = args.Input.ID
	)
	{{ camelcase .Entity }}ID, err := uuid.Parse(string(id))
	if err != nil {
		return nil, err
	}

	{{ camelcase .Entity }}, err := m.ctx.Repository.Update{{ .Entity }}(ctx, entity.Update{{ .Entity }}Params{
		ID:   {{ camelcase .Entity }}ID,
		Name: name,
	})
	if err != nil {
		return nil, err
	}
	return &{{ .Entity }}Resolver{
		{{ camelcase .Entity }}: {{ camelcase .Entity }},
		ctx:  m.ctx,
	}, nil
}

func (m *{{ .Entity }}Mutation) Delete{{ .Entity }}(ctx context.Context, args Delete{{ .Entity }}Args) (*{{ .Entity }}Resolver, error) {
	if err := m.ctx.Validator.Struct(args.Input); err != nil {
		return nil, err
	}

	{{ camelcase .Entity }}ID, err := uuid.Parse(string(args.Input.ID))
	if err != nil {
		return nil, err
	}

	{{ camelcase .Entity }}, err := m.ctx.Repository.Delete{{ .Entity }}(ctx, {{ camelcase .Entity }}ID)
	if err != nil {
		return nil, err
	}
	return &{{ .Entity }}Resolver{
		{{ camelcase .Entity }}: {{ camelcase .Entity }},
		ctx:  m.ctx,
	}, nil
}
