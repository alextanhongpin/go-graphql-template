package graph

import (
	"context"

	"github.com/alextanhongpin/go-graphql-template/entity"

	"github.com/graph-gophers/graphql-go"
)

// {{ .Entity }}Resolver holds the {{ camelcase .Entity }} entity to resolve.
type {{ .Entity }}Resolver struct {
	{{ camelcase .Entity }} entity.{{ .Entity }}
	ctx  *Context
}

// New{{ .Entity }}Resolver returns a new {{ .Entity }} resolver.
func New{{ .Entity }}Resolver(ctx *Context, {{ camelcase .Entity }} entity.{{ .Entity }}) *{{ .Entity }}Resolver {
	return &{{ .Entity }}Resolver{
		{{ camelcase .Entity }}: {{ camelcase .Entity }},
		ctx:  ctx,
	}
}

// ID returns the {{ camelcase .Entity }}'s id.
func (r *{{ .Entity }}Resolver) ID() graphql.ID {
	return graphql.ID(r.{{ camelcase .Entity }}.ID.String())
}

// Name returns the {{ camelcase .Entity }}'s name.
func (r *{{ .Entity }}Resolver) Name() string {
	return r.{{ camelcase .Entity }}.Name
}

// Email returns the {{ camelcase .Entity }}'s unique email address.
func (r *{{ .Entity }}Resolver) Email() string {
	return r.{{ camelcase .Entity }}.Email.String
}

func (r *{{ .Entity }}Resolver) Accounts(ctx context.Context) ([]*AccountResolver, error) {
	{{ camelcase .Entity }}ID := r.{{ camelcase .Entity }}.ID

	accounts, err := r.ctx.Repository.FindAccountsWith{{ .Entity }}ID(ctx, {{ camelcase .Entity }}ID)
	if err != nil {
		return nil, err
	}
	result := make([]*AccountResolver, len(accounts))
	for idx, account := range accounts {
		result[idx] = &AccountResolver{
			account: account,
			ctx:     r.ctx,
		}
	}
	return result, nil
}
