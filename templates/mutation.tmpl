package {{ .Entity }}graph

import (
	"context"

	"github.com/alextanhongpin/graphql-server-starter/entity"
	"github.com/alextanhongpin/graphql-server-starter/model"
	"github.com/alextanhongpin/graphql-server-starter/resolver"
	"github.com/google/uuid"
)

type Mutation struct {
	ctx *model.ResolverContext
}

func NewMutation(ctx *model.ResolverContext) *Mutation {
	return &Mutation{ctx: ctx}
}

func (m *Mutation) Create{{ pascalcase .Entity }}(ctx context.Context, args Create{{ pascalcase .Entity }}Args) (*resolver.{{ pascalcase .Entity }}Resolver, error) {
	var (
		name  = args.Input.Name
		email = args.Input.Email
	)
	{{ .Entity }}, err := m.ctx.Repository.Create{{ pascalcase .Entity }}(ctx, entity.Create{{ pascalcase .Entity }}Params{
		Name:              name,
		Email:             model.NewNullString(email),
		Preferred{{ pascalcase .Entity }}name: name,
	})
	if err != nil {
		return nil, err
	}
	return &resolver.{{ pascalcase .Entity }}Resolver{
		{{ pascalcase .Entity }}: {{ .Entity }},
		Ctx:  m.ctx,
	}, nil
}

func (m *Mutation) Update{{ pascalcase .Entity }}(ctx context.Context, args Update{{ pascalcase .Entity }}Args) (*resolver.{{ pascalcase .Entity }}Resolver, error) {
	var (
		name = args.Input.Name
		id   = args.Input.ID
	)
	{{ .Entity }}ID, err := uuid.Parse(string(id))
	if err != nil {
		return nil, err
	}
	{{ .Entity }}, err := m.ctx.Repository.Update{{ pascalcase .Entity }}(ctx, entity.Update{{ pascalcase .Entity }}Params{
		ID:   {{ .Entity }}ID,
		Name: name,
	})
	if err != nil {
		return nil, err
	}
	return &resolver.{{ pascalcase .Entity }}Resolver{
		{{ pascalcase .Entity }}: {{ .Entity }},
		Ctx:  m.ctx,
	}, nil
}

func (m *Mutation) Delete{{ pascalcase .Entity }}(ctx context.Context, args Delete{{ pascalcase .Entity }}Args) (*resolver.{{ pascalcase .Entity }}Resolver, error) {
	{{ .Entity }}ID, err := uuid.Parse(string(args.Input.ID))
	if err != nil {
		return nil, err
	}
	{{ .Entity }}, err := m.ctx.Repository.Delete{{ pascalcase .Entity }}(ctx, {{ .Entity }}ID)
	if err != nil {
		return nil, err
	}
	return &resolver.{{ pascalcase .Entity }}Resolver{
		{{ pascalcase .Entity }}: {{ .Entity }},
		Ctx:  m.ctx,
	}, nil
}
